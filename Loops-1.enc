{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 style='color:red'>Loops in Python</h1>\n",
    "<ol>\n",
    "    <li>for</li>\n",
    "    <li>while</li>\n",
    "    </ol>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello world Times 1\n",
      "Hello world Times 2\n",
      "Hello world Times 3\n",
      "Hello world Times 4\n",
      "Hello world Times 5\n",
      "Hello world Times 6\n",
      "Hello world Times 7\n",
      "Hello world Times 8\n",
      "Hello world Times 9\n",
      "Hello world Times 10\n"
     ]
    }
   ],
   "source": [
    "c = 1\n",
    "while c <= 10 : \n",
    "    print(f\"Hello world Times {c}\")\n",
    "    c = c + 1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter starting Point : 10\n",
      "Enter ending Point : 25\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n"
     ]
    }
   ],
   "source": [
    "start = int(input(\"Enter starting Point : \"))\n",
    "end = int(input(\"Enter ending Point : \"))\n",
    "if start <= end : \n",
    "    counter = start \n",
    "    while counter <= end : \n",
    "        print(counter)\n",
    "        counter = counter + 1\n",
    "else : \n",
    "    print(\"Start should be less than end\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "299\n",
      "598\n",
      "897\n"
     ]
    }
   ],
   "source": [
    "counter = 1\n",
    "while counter <= 1000 : \n",
    "    if counter % 13 == 0 and counter % 23 == 0 : \n",
    "        print(counter)\n",
    "    counter = counter + 1\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number : 12345\n",
      "12345 x  1 = 12345\n",
      "12345 x  2 = 24690\n",
      "12345 x  3 = 37035\n",
      "12345 x  4 = 49380\n",
      "12345 x  5 = 61725\n",
      "12345 x  6 = 74070\n",
      "12345 x  7 = 86415\n",
      "12345 x  8 = 98760\n",
      "12345 x  9 = 111105\n",
      "12345 x 10 = 123450\n"
     ]
    }
   ],
   "source": [
    "num =int(input(\"Enter a number : \"))\n",
    "c = 1\n",
    "while c <= 10  : \n",
    "    print(f\"{num:>5} x {c:>2} = {num*c:>5}\")\n",
    "    c = c + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Start Point : 10\n",
      "Enter End Point : 1\n",
      "Enter Jump : 03\n",
      "10\n",
      "7\n",
      "4\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "start = int(input(\"Enter Start Point : \"))\n",
    "end = int(input(\"Enter End Point : \"))\n",
    "step = int(input(\"Enter Jump : \"))\n",
    "\n",
    "if step < 0 : \n",
    "    step = -(step*2)\n",
    "\n",
    "if start <= end : \n",
    "    while start <= end : \n",
    "        print(start)\n",
    "        start = start + step \n",
    "else : \n",
    "    while start >= end : \n",
    "        print(start)\n",
    "        start = start - step "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Start : 10\n",
      "Enter End : 1\n",
      "Step : 2\n",
      "Can't Generate Number in Given Range\n"
     ]
    }
   ],
   "source": [
    "start = int(input(\"Enter Start : \"))\n",
    "end = int(input(\"Enter End : \"))\n",
    "step = int(input(\"Step : \"))\n",
    "\n",
    "if step != 0 and step > 0 and start <= end : \n",
    "    while start <= end : \n",
    "        print(start)\n",
    "        start += step \n",
    "elif step !=0 and ( step < 0 and start <= end ) or ( step > 0 and start >= end ) : \n",
    "    print(\"Can't Generate Number in Given Range\")\n",
    "\n",
    "elif step != 0 and step < 0 and start >= end  : \n",
    "    while start >= end : \n",
    "        print(start)\n",
    "        start += step \n",
    "else : \n",
    "    print(\"Step Can not be Zero!\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before Loop\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "Loop Executed Successfully.\n",
      "AfterLoop\n"
     ]
    }
   ],
   "source": [
    "print(\"Before Loop\")\n",
    "c = 1\n",
    "while c <= 10 :\n",
    "    #break\n",
    "    print(c)\n",
    "    c = c + 1\n",
    "else : \n",
    "    print(\"Loop Executed Successfully.\")\n",
    "print(\"AfterLoop\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before Loop\n",
      "AfterLoop\n"
     ]
    }
   ],
   "source": [
    "print(\"Before Loop\")\n",
    "c = 1\n",
    "while c <= 10 :\n",
    "    break\n",
    "    print(c)\n",
    "    c = c + 1\n",
    "else : \n",
    "    print(\"Loop Executed Successfully.\")\n",
    "print(\"AfterLoop\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before Loop\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "AfterLoop\n"
     ]
    }
   ],
   "source": [
    "print(\"Before Loop\")\n",
    "c = 1\n",
    "while c <= 10 :\n",
    "    print(c)\n",
    "    if c == 5 : \n",
    "        break\n",
    "    c = c + 1\n",
    "else : \n",
    "    print(\"Loop Executed Successfully.\")\n",
    "print(\"AfterLoop\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World Times : 2\n",
      "Hello World Times : 4\n",
      "Hello World Times : 6\n",
      "Hello World Times : 8\n",
      "Hello World Times : 10\n",
      "Loop Executed Sucessfully.\n"
     ]
    }
   ],
   "source": [
    "c = 0\n",
    "while c < 10 :\n",
    "    c = c + 1\n",
    "    if c % 2 : \n",
    "        continue \n",
    "    print(\"Hello World Times : {}\".format(c))\n",
    "else : \n",
    "    print(\"Loop Executed Sucessfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*\n",
      "**\n",
      "***\n",
      "****\n",
      "*****\n",
      "******\n",
      "*******\n",
      "********\n",
      "*********\n",
      "**********\n"
     ]
    }
   ],
   "source": [
    "row = 1\n",
    "while row <= 10 : \n",
    "    print(\"*\"*row)\n",
    "    row = row + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number : 5\n",
      "    0 + 5 =  5\n",
      "    5 + 5 = 10\n",
      "   10 + 5 = 15\n",
      "   15 + 5 = 20\n",
      "   20 + 5 = 25\n",
      "   25 + 5 = 30\n",
      "   30 + 5 = 35\n",
      "   35 + 5 = 40\n",
      "   40 + 5 = 45\n",
      "   45 + 5 = 50\n",
      "This is your table of 5\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a number : \"))\n",
    "s = 0\n",
    "c = 1\n",
    "while c <= 10 : \n",
    "    print(f\"{s:>5} + {num} = {s+num:>2}\")\n",
    "    s = s + num\n",
    "    c = c + 1\n",
    "else : \n",
    "    print(f\"This is your table of {num}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n",
      "5\n",
      "7\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for item in range(1,10,2) : \n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "for item in range(1,11) : \n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number : 5\n",
      "5\n",
      "10\n",
      "15\n",
      "20\n",
      "25\n",
      "30\n",
      "35\n",
      "40\n",
      "45\n",
      "50\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a number : \"))\n",
    "for item in range(1,11) : \n",
    "    print(item*num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
