{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "print(type(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'5'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "repr(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'5'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = \"Hello Word\\tHI World\\n\\tPython is Awesome.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hello Word\\tHI World\\n\\tPython is Awesome.'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"'Hello Word\\\\tHI World\\\\n\\\\tPython is Awesome.'\""
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "repr(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Word\tHI World\n",
      "\tPython is Awesome.\n"
     ]
    }
   ],
   "source": [
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of x  =  <class 'str'>\n",
      "Value of x =  hello world\n",
      "Type of y =  <class 'int'>\n",
      "Value of z =  5\n",
      "id of x =  3031392724208\n",
      "id of y =  140732728209280\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "x = 5 \n",
    "y = 6\n",
    "y = 5\n",
    "x = \"hello world\"\n",
    "print(\"Type of x  = \",type(x))\n",
    "print(\"Value of x = \",x)\n",
    "print(\"Type of y = \",type(y))\n",
    "print(\"Value of z = \",y)\n",
    "print(\"id of x = \",id(x))\n",
    "print(\"id of y = \",id(y))\n",
    "print(id(x)==id(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello world\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "x = 434324234.343434\n",
    "x = 'hello world'\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value of x = 5 \n",
      "Type of x is <class 'int'>.\n",
      "Id of x is 140732728209280\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "print(f\"value of x = {x} \")\n",
    "print(\"Type of x is %s.\"%(type(x)))\n",
    "print(\"Id of x is {}\".format(id(x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 1, y = 2, z = 3\n",
      "x = 1, y = 2, z = 3\n",
      "x = 1, y  = 2, z = 3\n"
     ]
    }
   ],
   "source": [
    "x,y,z=1,2,3 #string formating\n",
    "print(f\"x = {x}, y = {y}, z = {z}\")\n",
    "print(\"x = %d, y = %d, z = %d\"%(x,y,z))\n",
    "print(\"x = {2}, y  = {1}, z = {0}\".format(z,y,x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your Language : Hindi\n",
      "Hello This is Hindi.\n",
      "    Hindi is Awesome. \n",
      "Hindi is a simple Language.\n",
      "    are you getting simplicity of Hindi.?\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "lang = input(\"Enter your Language : \")\n",
    "s = \"\"\"Hello This is {0}.\n",
    "    {0} is Awesome. \n",
    "{0} is a simple Language.\n",
    "    are you getting simplicity of {0}.?\n",
    "    \"\"\".format(lang)\n",
    "\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "print(dir(x)) #dir will all methods and attributes of class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.denominator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.numerator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Return an array of bytes representing an integer.\n",
      "\n",
      "  length\n",
      "    Length of bytes object to use.  An OverflowError is raised if the\n",
      "    integer is not representable with the given number of bytes.\n",
      "  byteorder\n",
      "    The byte order used to represent the integer.  If byteorder is 'big',\n",
      "    the most significant byte is at the beginning of the byte array.  If\n",
      "    byteorder is 'little', the most significant byte is at the end of the\n",
      "    byte array.  To request the native byte order of the host system, use\n",
      "    `sys.byteorder' as the byte order value.\n",
      "  signed\n",
      "    Determines whether two's complement is used to represent the integer.\n",
      "    If signed is False and a negative integer is given, an OverflowError\n",
      "    is raised.\n"
     ]
    }
   ],
   "source": [
    "print(x.to_bytes.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.to_bytes(30,'little')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 10 \n",
    "num = x.to_bytes(2,'big')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'\\x00\\n'"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = x.from_bytes(num,'big')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "z = int.from_bytes(num,'little')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2560"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 5\n",
    "x.bit_length()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b101'"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.conjugate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.__sizeof__()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bit length :  323\n",
      "size  = 68 bytes\n"
     ]
    }
   ],
   "source": [
    "x = 9838791947239749234732949349294798324983279847398247983274982374972984739279832498327983278943284\n",
    "print(\"bit length : \",x.bit_length())\n",
    "print(\"size  = {} bytes\".format(x.__sizeof__()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.551115123125783e-17"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0.1+0.2-0.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__abs__', '__add__', '__bool__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getformat__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__set_format__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', 'as_integer_ratio', 'conjugate', 'fromhex', 'hex', 'imag', 'is_integer', 'real']\n"
     ]
    }
   ],
   "source": [
    "print(dir(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Return a hexadecimal representation of a floating-point number.\n",
      "\n",
      ">>> (-0.1).hex()\n",
      "'-0x1.999999999999ap-4'\n",
      ">>> 3.14159.hex()\n",
      "'0x1.921f9f01b866ep+1'\n"
     ]
    }
   ],
   "source": [
    "print(x.hex.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5.0+6j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "complex"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3031392916400"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__abs__', '__add__', '__bool__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', 'conjugate', 'imag', 'real']\n"
     ]
    }
   ],
   "source": [
    "print(dir(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = \"        Hello Word         \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Hello Word         \n"
     ]
    }
   ],
   "source": [
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n"
     ]
    }
   ],
   "source": [
    "print(dir(s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'        Hello Word         '\n"
     ]
    }
   ],
   "source": [
    "print(repr(s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "y = 6\n",
    "print(x+y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.__add__(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.__sub__(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.__mul__(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x*6#X.__mul__(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'HELLOHELLOHELLOHELLOHELLOHELLO'"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"HELLO\"*6#\"Hello\".__mul__(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "s =  \"        Hello World       \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'        Hello World       '\n"
     ]
    }
   ],
   "source": [
    "print(repr(s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n"
     ]
    }
   ],
   "source": [
    "print(dir(s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Partition the string into three parts using the given separator.\n",
      "\n",
      "This will search for the separator in the string.  If the separator is found,\n",
      "returns a 3-tuple containing the part before the separator, the separator\n",
      "itself, and the part after it.\n",
      "\n",
      "If the separator is not found, returns a 3-tuple containing the original string\n",
      "and two empty strings.\n"
     ]
    }
   ],
   "source": [
    "print(s.partition.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on built-in function partition:\n",
      "\n",
      "partition(sep, /) method of builtins.str instance\n",
      "    Partition the string into three parts using the given separator.\n",
      "    \n",
      "    This will search for the separator in the string.  If the separator is found,\n",
      "    returns a 3-tuple containing the part before the separator, the separator\n",
      "    itself, and the part after it.\n",
      "    \n",
      "    If the separator is not found, returns a 3-tuple containing the original string\n",
      "    and two empty strings.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(s.partition)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = \"You are going to Learn Python. It is Awesome to learn Python.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = s.partition(\"Python\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('You are going to Learn ', 'Python', '. It is Awesome to learn Python.')"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "l = s.split('Python')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['You are going to Learn ', '. It is Awesome to learn ', '.']"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['You', 'are', 'going', 'to', 'Learn', 'Python.', 'It', 'is', 'Awesome', 'to', 'learn', 'Python.']\n"
     ]
    }
   ],
   "source": [
    "l = s.split()\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = open(\"C:/users/sachin/Desktop/demo.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = data.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL), capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989.\n",
      "Rather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[31]\n",
      "\n",
      "While offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: \"To describe something as 'clever' is not considered a compliment in the Python culture.\"[50] Python's philosophy rejects the Perl \"there is more than one way to do it\" approach to language design in favor of \"there should be one—and preferably only one—obvious way to do it\".[49]\n",
      "\n",
      "Python's developers strive to avoid premature optimization, and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[51] When speed is important, a Python.\n"
     ]
    }
   ],
   "source": [
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL), capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989.\\nRather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum\\'s vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[31]\\n\\nWhile offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: \"To describe something as \\'clever\\' is not considered a compliment in the Python culture.\"[50] Python\\'s philosophy rejects the Perl \"there is more than one way to do it\" approach to language design in favor of \"there should be one—and preferably only one—obvious way to do it\".[49]\\n\\nPython\\'s developers strive to avoid premature optimization, and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[51] When speed is important, a Python.'\n"
     ]
    }
   ],
   "source": [
    "print(repr(s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_of_line = s.split('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL), capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989.',\n",
       " \"Rather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[31]\",\n",
       " '',\n",
       " 'While offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: \"To describe something as \\'clever\\' is not considered a compliment in the Python culture.\"[50] Python\\'s philosophy rejects the Perl \"there is more than one way to do it\" approach to language design in favor of \"there should be one—and preferably only one—obvious way to do it\".[49]',\n",
       " '',\n",
       " \"Python's developers strive to avoid premature optimization, and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[51] When speed is important, a Python.\"]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_of_line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(no_of_line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "223"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(s.split())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1450\n"
     ]
    }
   ],
   "source": [
    "c = 0 \n",
    "for char in s : \n",
    "    if c is not '' or c is not ' ' or c is not '\\n' or c is not '\\t' : \n",
    "        c = c + 1\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your file name : C:/users\n"
     ]
    },
    {
     "ename": "PermissionError",
     "evalue": "[Errno 13] Permission denied: 'C:/users'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mPermissionError\u001b[0m                           Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-119-522b668037b0>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mfilename\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Enter your file name : \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mPermissionError\u001b[0m: [Errno 13] Permission denied: 'C:/users'"
     ]
    }
   ],
   "source": [
    "filename = input(\"Enter your file name : \")\n",
    "f = open(filename) \n",
    "data = f.read()\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'{\\n \"cells\": [\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 2,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"<class \\'int\\'>\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 5\\\\n\",\\n    \"print(type(x))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 3,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"\\'5\\'\"\\n      ]\\n     },\\n     \"execution_count\": 3,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"repr(5)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 6,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"\\'5\\'\"\\n      ]\\n     },\\n     \"execution_count\": 6,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"str(5)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 7,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"s = \\\\\"Hello Word\\\\\\\\tHI World\\\\\\\\n\\\\\\\\tPython is Awesome.\\\\\"\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 8,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"\\'Hello Word\\\\\\\\tHI World\\\\\\\\n\\\\\\\\tPython is Awesome.\\'\"\\n      ]\\n     },\\n     \"execution_count\": 8,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"s\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 9,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"\\\\\"\\'Hello Word\\\\\\\\\\\\\\\\tHI World\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tPython is Awesome.\\'\\\\\"\"\\n      ]\\n     },\\n     \"execution_count\": 9,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"repr(s)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 11,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Hello Word\\\\tHI World\\\\n\",\\n      \"\\\\tPython is Awesome.\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(s)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 17,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Type of x  =  <class \\'str\\'>\\\\n\",\\n      \"Value of x =  hello world\\\\n\",\\n      \"Type of y =  <class \\'int\\'>\\\\n\",\\n      \"Value of z =  5\\\\n\",\\n      \"id of x =  3031392724208\\\\n\",\\n      \"id of y =  140732728209280\\\\n\",\\n      \"False\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 5 \\\\n\",\\n    \"y = 6\\\\n\",\\n    \"y = 5\\\\n\",\\n    \"x = \\\\\"hello world\\\\\"\\\\n\",\\n    \"print(\\\\\"Type of x  = \\\\\",type(x))\\\\n\",\\n    \"print(\\\\\"Value of x = \\\\\",x)\\\\n\",\\n    \"print(\\\\\"Type of y = \\\\\",type(y))\\\\n\",\\n    \"print(\\\\\"Value of z = \\\\\",y)\\\\n\",\\n    \"print(\\\\\"id of x = \\\\\",id(x))\\\\n\",\\n    \"print(\\\\\"id of y = \\\\\",id(y))\\\\n\",\\n    \"print(id(x)==id(y))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 13,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"hello world\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 5\\\\n\",\\n    \"x = 434324234.343434\\\\n\",\\n    \"x = \\'hello world\\'\\\\n\",\\n    \"print(x)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 18,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"value of x = 5 \\\\n\",\\n      \"Type of x is <class \\'int\\'>.\\\\n\",\\n      \"Id of x is 140732728209280\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 5\\\\n\",\\n    \"print(f\\\\\"value of x = {x} \\\\\")\\\\n\",\\n    \"print(\\\\\"Type of x is %s.\\\\\"%(type(x)))\\\\n\",\\n    \"print(\\\\\"Id of x is {}\\\\\".format(id(x)))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 20,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"x = 1, y = 2, z = 3\\\\n\",\\n      \"x = 1, y = 2, z = 3\\\\n\",\\n      \"x = 1, y  = 2, z = 3\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x,y,z=1,2,3 #string formating\\\\n\",\\n    \"print(f\\\\\"x = {x}, y = {y}, z = {z}\\\\\")\\\\n\",\\n    \"print(\\\\\"x = %d, y = %d, z = %d\\\\\"%(x,y,z))\\\\n\",\\n    \"print(\\\\\"x = {2}, y  = {1}, z = {0}\\\\\".format(z,y,x))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 24,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Enter your Language : Hindi\\\\n\",\\n      \"Hello This is Hindi.\\\\n\",\\n      \"    Hindi is Awesome. \\\\n\",\\n      \"Hindi is a simple Language.\\\\n\",\\n      \"    are you getting simplicity of Hindi.?\\\\n\",\\n      \"    \\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"lang = input(\\\\\"Enter your Language : \\\\\")\\\\n\",\\n    \"s = \\\\\"\\\\\"\\\\\"Hello This is {0}.\\\\n\",\\n    \"    {0} is Awesome. \\\\n\",\\n    \"{0} is a simple Language.\\\\n\",\\n    \"    are you getting simplicity of {0}.?\\\\n\",\\n    \"    \\\\\"\\\\\"\\\\\".format(lang)\\\\n\",\\n    \"\\\\n\",\\n    \"print(s)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 25,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"[\\'__abs__\\', \\'__add__\\', \\'__and__\\', \\'__bool__\\', \\'__ceil__\\', \\'__class__\\', \\'__delattr__\\', \\'__dir__\\', \\'__divmod__\\', \\'__doc__\\', \\'__eq__\\', \\'__float__\\', \\'__floor__\\', \\'__floordiv__\\', \\'__format__\\', \\'__ge__\\', \\'__getattribute__\\', \\'__getnewargs__\\', \\'__gt__\\', \\'__hash__\\', \\'__index__\\', \\'__init__\\', \\'__init_subclass__\\', \\'__int__\\', \\'__invert__\\', \\'__le__\\', \\'__lshift__\\', \\'__lt__\\', \\'__mod__\\', \\'__mul__\\', \\'__ne__\\', \\'__neg__\\', \\'__new__\\', \\'__or__\\', \\'__pos__\\', \\'__pow__\\', \\'__radd__\\', \\'__rand__\\', \\'__rdivmod__\\', \\'__reduce__\\', \\'__reduce_ex__\\', \\'__repr__\\', \\'__rfloordiv__\\', \\'__rlshift__\\', \\'__rmod__\\', \\'__rmul__\\', \\'__ror__\\', \\'__round__\\', \\'__rpow__\\', \\'__rrshift__\\', \\'__rshift__\\', \\'__rsub__\\', \\'__rtruediv__\\', \\'__rxor__\\', \\'__setattr__\\', \\'__sizeof__\\', \\'__str__\\', \\'__sub__\\', \\'__subclasshook__\\', \\'__truediv__\\', \\'__trunc__\\', \\'__xor__\\', \\'bit_length\\', \\'conjugate\\', \\'denominator\\', \\'from_bytes\\', \\'imag\\', \\'numerator\\', \\'real\\', \\'to_bytes\\']\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 5\\\\n\",\\n    \"print(dir(x)) #dir will all methods and attributes of class\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 29,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"1\"\\n      ]\\n     },\\n     \"execution_count\": 29,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.denominator\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 30,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"5\"\\n      ]\\n     },\\n     \"execution_count\": 30,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.numerator\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 36,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Return an array of bytes representing an integer.\\\\n\",\\n      \"\\\\n\",\\n      \"  length\\\\n\",\\n      \"    Length of bytes object to use.  An OverflowError is raised if the\\\\n\",\\n      \"    integer is not representable with the given number of bytes.\\\\n\",\\n      \"  byteorder\\\\n\",\\n      \"    The byte order used to represent the integer.  If byteorder is \\'big\\',\\\\n\",\\n      \"    the most significant byte is at the beginning of the byte array.  If\\\\n\",\\n      \"    byteorder is \\'little\\', the most significant byte is at the end of the\\\\n\",\\n      \"    byte array.  To request the native byte order of the host system, use\\\\n\",\\n      \"    `sys.byteorder\\' as the byte order value.\\\\n\",\\n      \"  signed\\\\n\",\\n      \"    Determines whether two\\'s complement is used to represent the integer.\\\\n\",\\n      \"    If signed is False and a negative integer is given, an OverflowError\\\\n\",\\n      \"    is raised.\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(x.to_bytes.__doc__)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 40,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"b\\'\\\\\\\\x05\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\\\\\\\x00\\'\"\\n      ]\\n     },\\n     \"execution_count\": 40,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.to_bytes(30,\\'little\\')\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 50,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"x = 10 \\\\n\",\\n    \"num = x.to_bytes(2,\\'big\\')\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 51,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"b\\'\\\\\\\\x00\\\\\\\\n\\'\"\\n      ]\\n     },\\n     \"execution_count\": 51,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"num\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 52,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"y = x.from_bytes(num,\\'big\\')\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 53,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"10\"\\n      ]\\n     },\\n     \"execution_count\": 53,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"y\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 54,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"z = int.from_bytes(num,\\'little\\')\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 55,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"2560\"\\n      ]\\n     },\\n     \"execution_count\": 55,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"z\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 58,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"3\"\\n      ]\\n     },\\n     \"execution_count\": 58,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 5\\\\n\",\\n    \"x.bit_length()\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 60,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"\\'0b101\\'\"\\n      ]\\n     },\\n     \"execution_count\": 60,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"bin(5)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 62,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"5\"\\n      ]\\n     },\\n     \"execution_count\": 62,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.conjugate()\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 63,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"28\"\\n      ]\\n     },\\n     \"execution_count\": 63,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.__sizeof__()\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 64,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"bit length :  323\\\\n\",\\n      \"size  = 68 bytes\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 9838791947239749234732949349294798324983279847398247983274982374972984739279832498327983278943284\\\\n\",\\n    \"print(\\\\\"bit length : \\\\\",x.bit_length())\\\\n\",\\n    \"print(\\\\\"size  = {} bytes\\\\\".format(x.__sizeof__()))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 65,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"5.551115123125783e-17\"\\n      ]\\n     },\\n     \"execution_count\": 65,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"0.1+0.2-0.3\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 66,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"x = 5.6\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 67,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"float\"\\n      ]\\n     },\\n     \"execution_count\": 67,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"type(x)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 69,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"[\\'__abs__\\', \\'__add__\\', \\'__bool__\\', \\'__class__\\', \\'__delattr__\\', \\'__dir__\\', \\'__divmod__\\', \\'__doc__\\', \\'__eq__\\', \\'__float__\\', \\'__floordiv__\\', \\'__format__\\', \\'__ge__\\', \\'__getattribute__\\', \\'__getformat__\\', \\'__getnewargs__\\', \\'__gt__\\', \\'__hash__\\', \\'__init__\\', \\'__init_subclass__\\', \\'__int__\\', \\'__le__\\', \\'__lt__\\', \\'__mod__\\', \\'__mul__\\', \\'__ne__\\', \\'__neg__\\', \\'__new__\\', \\'__pos__\\', \\'__pow__\\', \\'__radd__\\', \\'__rdivmod__\\', \\'__reduce__\\', \\'__reduce_ex__\\', \\'__repr__\\', \\'__rfloordiv__\\', \\'__rmod__\\', \\'__rmul__\\', \\'__round__\\', \\'__rpow__\\', \\'__rsub__\\', \\'__rtruediv__\\', \\'__set_format__\\', \\'__setattr__\\', \\'__sizeof__\\', \\'__str__\\', \\'__sub__\\', \\'__subclasshook__\\', \\'__truediv__\\', \\'__trunc__\\', \\'as_integer_ratio\\', \\'conjugate\\', \\'fromhex\\', \\'hex\\', \\'imag\\', \\'is_integer\\', \\'real\\']\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(dir(x))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 70,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Return a hexadecimal representation of a floating-point number.\\\\n\",\\n      \"\\\\n\",\\n      \">>> (-0.1).hex()\\\\n\",\\n      \"\\'-0x1.999999999999ap-4\\'\\\\n\",\\n      \">>> 3.14159.hex()\\\\n\",\\n      \"\\'0x1.921f9f01b866ep+1\\'\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(x.hex.__doc__)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 71,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"x = 5.0+6j\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 72,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"complex\"\\n      ]\\n     },\\n     \"execution_count\": 72,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"type(x)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 73,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"3031392916400\"\\n      ]\\n     },\\n     \"execution_count\": 73,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"id(x)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 74,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"[\\'__abs__\\', \\'__add__\\', \\'__bool__\\', \\'__class__\\', \\'__delattr__\\', \\'__dir__\\', \\'__divmod__\\', \\'__doc__\\', \\'__eq__\\', \\'__float__\\', \\'__floordiv__\\', \\'__format__\\', \\'__ge__\\', \\'__getattribute__\\', \\'__getnewargs__\\', \\'__gt__\\', \\'__hash__\\', \\'__init__\\', \\'__init_subclass__\\', \\'__int__\\', \\'__le__\\', \\'__lt__\\', \\'__mod__\\', \\'__mul__\\', \\'__ne__\\', \\'__neg__\\', \\'__new__\\', \\'__pos__\\', \\'__pow__\\', \\'__radd__\\', \\'__rdivmod__\\', \\'__reduce__\\', \\'__reduce_ex__\\', \\'__repr__\\', \\'__rfloordiv__\\', \\'__rmod__\\', \\'__rmul__\\', \\'__rpow__\\', \\'__rsub__\\', \\'__rtruediv__\\', \\'__setattr__\\', \\'__sizeof__\\', \\'__str__\\', \\'__sub__\\', \\'__subclasshook__\\', \\'__truediv__\\', \\'conjugate\\', \\'imag\\', \\'real\\']\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(dir(x))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 75,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"s = \\\\\"        Hello Word         \\\\\"\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 76,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"        Hello Word         \\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(s)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 78,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"[\\'__add__\\', \\'__class__\\', \\'__contains__\\', \\'__delattr__\\', \\'__dir__\\', \\'__doc__\\', \\'__eq__\\', \\'__format__\\', \\'__ge__\\', \\'__getattribute__\\', \\'__getitem__\\', \\'__getnewargs__\\', \\'__gt__\\', \\'__hash__\\', \\'__init__\\', \\'__init_subclass__\\', \\'__iter__\\', \\'__le__\\', \\'__len__\\', \\'__lt__\\', \\'__mod__\\', \\'__mul__\\', \\'__ne__\\', \\'__new__\\', \\'__reduce__\\', \\'__reduce_ex__\\', \\'__repr__\\', \\'__rmod__\\', \\'__rmul__\\', \\'__setattr__\\', \\'__sizeof__\\', \\'__str__\\', \\'__subclasshook__\\', \\'capitalize\\', \\'casefold\\', \\'center\\', \\'count\\', \\'encode\\', \\'endswith\\', \\'expandtabs\\', \\'find\\', \\'format\\', \\'format_map\\', \\'index\\', \\'isalnum\\', \\'isalpha\\', \\'isascii\\', \\'isdecimal\\', \\'isdigit\\', \\'isidentifier\\', \\'islower\\', \\'isnumeric\\', \\'isprintable\\', \\'isspace\\', \\'istitle\\', \\'isupper\\', \\'join\\', \\'ljust\\', \\'lower\\', \\'lstrip\\', \\'maketrans\\', \\'partition\\', \\'replace\\', \\'rfind\\', \\'rindex\\', \\'rjust\\', \\'rpartition\\', \\'rsplit\\', \\'rstrip\\', \\'split\\', \\'splitlines\\', \\'startswith\\', \\'strip\\', \\'swapcase\\', \\'title\\', \\'translate\\', \\'upper\\', \\'zfill\\']\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(dir(s))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 77,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"\\'        Hello Word         \\'\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(repr(s))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 79,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"11\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"x = 5\\\\n\",\\n    \"y = 6\\\\n\",\\n    \"print(x+y)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 80,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"11\"\\n      ]\\n     },\\n     \"execution_count\": 80,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.__add__(6)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 81,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"-1\"\\n      ]\\n     },\\n     \"execution_count\": 81,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.__sub__(6)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 82,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"30\"\\n      ]\\n     },\\n     \"execution_count\": 82,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x.__mul__(6)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 85,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"30\"\\n      ]\\n     },\\n     \"execution_count\": 85,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"x*6#X.__mul__(6)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 87,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"\\'HELLOHELLOHELLOHELLOHELLOHELLO\\'\"\\n      ]\\n     },\\n     \"execution_count\": 87,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"\\\\\"HELLO\\\\\"*6#\\\\\"Hello\\\\\".__mul__(6)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 88,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"s =  \\\\\"        Hello World       \\\\\"\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 89,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"\\'        Hello World       \\'\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(repr(s))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 90,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"[\\'__add__\\', \\'__class__\\', \\'__contains__\\', \\'__delattr__\\', \\'__dir__\\', \\'__doc__\\', \\'__eq__\\', \\'__format__\\', \\'__ge__\\', \\'__getattribute__\\', \\'__getitem__\\', \\'__getnewargs__\\', \\'__gt__\\', \\'__hash__\\', \\'__init__\\', \\'__init_subclass__\\', \\'__iter__\\', \\'__le__\\', \\'__len__\\', \\'__lt__\\', \\'__mod__\\', \\'__mul__\\', \\'__ne__\\', \\'__new__\\', \\'__reduce__\\', \\'__reduce_ex__\\', \\'__repr__\\', \\'__rmod__\\', \\'__rmul__\\', \\'__setattr__\\', \\'__sizeof__\\', \\'__str__\\', \\'__subclasshook__\\', \\'capitalize\\', \\'casefold\\', \\'center\\', \\'count\\', \\'encode\\', \\'endswith\\', \\'expandtabs\\', \\'find\\', \\'format\\', \\'format_map\\', \\'index\\', \\'isalnum\\', \\'isalpha\\', \\'isascii\\', \\'isdecimal\\', \\'isdigit\\', \\'isidentifier\\', \\'islower\\', \\'isnumeric\\', \\'isprintable\\', \\'isspace\\', \\'istitle\\', \\'isupper\\', \\'join\\', \\'ljust\\', \\'lower\\', \\'lstrip\\', \\'maketrans\\', \\'partition\\', \\'replace\\', \\'rfind\\', \\'rindex\\', \\'rjust\\', \\'rpartition\\', \\'rsplit\\', \\'rstrip\\', \\'split\\', \\'splitlines\\', \\'startswith\\', \\'strip\\', \\'swapcase\\', \\'title\\', \\'translate\\', \\'upper\\', \\'zfill\\']\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(dir(s))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 93,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Partition the string into three parts using the given separator.\\\\n\",\\n      \"\\\\n\",\\n      \"This will search for the separator in the string.  If the separator is found,\\\\n\",\\n      \"returns a 3-tuple containing the part before the separator, the separator\\\\n\",\\n      \"itself, and the part after it.\\\\n\",\\n      \"\\\\n\",\\n      \"If the separator is not found, returns a 3-tuple containing the original string\\\\n\",\\n      \"and two empty strings.\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(s.partition.__doc__)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 94,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Help on built-in function partition:\\\\n\",\\n      \"\\\\n\",\\n      \"partition(sep, /) method of builtins.str instance\\\\n\",\\n      \"    Partition the string into three parts using the given separator.\\\\n\",\\n      \"    \\\\n\",\\n      \"    This will search for the separator in the string.  If the separator is found,\\\\n\",\\n      \"    returns a 3-tuple containing the part before the separator, the separator\\\\n\",\\n      \"    itself, and the part after it.\\\\n\",\\n      \"    \\\\n\",\\n      \"    If the separator is not found, returns a 3-tuple containing the original string\\\\n\",\\n      \"    and two empty strings.\\\\n\",\\n      \"\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"help(s.partition)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 96,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"s = \\\\\"You are going to Learn Python. It is Awesome to learn Python.\\\\\"\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 97,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"t = s.partition(\\\\\"Python\\\\\")\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 98,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"(\\'You are going to Learn \\', \\'Python\\', \\'. It is Awesome to learn Python.\\')\"\\n      ]\\n     },\\n     \"execution_count\": 98,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"t\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 99,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"l = s.split(\\'Python\\')\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 100,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"[\\'You are going to Learn \\', \\'. It is Awesome to learn \\', \\'.\\']\"\\n      ]\\n     },\\n     \"execution_count\": 100,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"l\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 102,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"[\\'You\\', \\'are\\', \\'going\\', \\'to\\', \\'Learn\\', \\'Python.\\', \\'It\\', \\'is\\', \\'Awesome\\', \\'to\\', \\'learn\\', \\'Python.\\']\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"l = s.split()\\\\n\",\\n    \"print(l)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 105,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"data = open(\\\\\"C:/users/sachin/Desktop/demo.txt\\\\\")\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 106,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"s = data.read()\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 107,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"data.close()\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 108,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL), capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989.\\\\n\",\\n      \"Rather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum\\'s vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[31]\\\\n\",\\n      \"\\\\n\",\\n      \"While offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: \\\\\"To describe something as \\'clever\\' is not considered a compliment in the Python culture.\\\\\"[50] Python\\'s philosophy rejects the Perl \\\\\"there is more than one way to do it\\\\\" approach to language design in favor of \\\\\"there should be oneâ€”and preferably only oneâ€”obvious way to do it\\\\\".[49]\\\\n\",\\n      \"\\\\n\",\\n      \"Python\\'s developers strive to avoid premature optimization, and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[51] When speed is important, a Python.\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(s)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 109,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"\\'Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL), capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989.\\\\\\\\nRather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum\\\\\\\\\\'s vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[31]\\\\\\\\n\\\\\\\\nWhile offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: \\\\\"To describe something as \\\\\\\\\\'clever\\\\\\\\\\' is not considered a compliment in the Python culture.\\\\\"[50] Python\\\\\\\\\\'s philosophy rejects the Perl \\\\\"there is more than one way to do it\\\\\" approach to language design in favor of \\\\\"there should be oneâ€”and preferably only oneâ€”obvious way to do it\\\\\".[49]\\\\\\\\n\\\\\\\\nPython\\\\\\\\\\'s developers strive to avoid premature optimization, and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[51] When speed is important, a Python.\\'\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"print(repr(s))\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 110,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"no_of_line = s.split(\\'\\\\\\\\n\\')\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 111,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"[\\'Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL), capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989.\\',\\\\n\",\\n       \" \\\\\"Rather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum\\'s vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[31]\\\\\",\\\\n\",\\n       \" \\'\\',\\\\n\",\\n       \" \\'While offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: \\\\\"To describe something as \\\\\\\\\\'clever\\\\\\\\\\' is not considered a compliment in the Python culture.\\\\\"[50] Python\\\\\\\\\\'s philosophy rejects the Perl \\\\\"there is more than one way to do it\\\\\" approach to language design in favor of \\\\\"there should be oneâ€”and preferably only oneâ€”obvious way to do it\\\\\".[49]\\',\\\\n\",\\n       \" \\'\\',\\\\n\",\\n       \" \\\\\"Python\\'s developers strive to avoid premature optimization, and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[51] When speed is important, a Python.\\\\\"]\"\\n      ]\\n     },\\n     \"execution_count\": 111,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"no_of_line\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 112,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"6\"\\n      ]\\n     },\\n     \"execution_count\": 112,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"len(no_of_line)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 114,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/plain\": [\\n       \"223\"\\n      ]\\n     },\\n     \"execution_count\": 114,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"len(s.split())\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 115,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"name\": \"stdout\",\\n     \"output_type\": \"stream\",\\n     \"text\": [\\n      \"1450\\\\n\"\\n     ]\\n    }\\n   ],\\n   \"source\": [\\n    \"c = 0 \\\\n\",\\n    \"for char in s : \\\\n\",\\n    \"    if c is not \\'\\' or c is not \\' \\' or c is not \\'\\\\\\\\n\\' or c is not \\'\\\\\\\\t\\' : \\\\n\",\\n    \"        c = c + 1\\\\n\",\\n    \"print(c)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": null,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": []\\n  }\\n ],\\n \"metadata\": {\\n  \"kernelspec\": {\\n   \"display_name\": \"Python 3\",\\n   \"language\": \"python\",\\n   \"name\": \"python3\"\\n  },\\n  \"language_info\": {\\n   \"codemirror_mode\": {\\n    \"name\": \"ipython\",\\n    \"version\": 3\\n   },\\n   \"file_extension\": \".py\",\\n   \"mimetype\": \"text/x-python\",\\n   \"name\": \"python\",\\n   \"nbconvert_exporter\": \"python\",\\n   \"pygments_lexer\": \"ipython3\",\\n   \"version\": \"3.7.0\"\\n  }\\n },\\n \"nbformat\": 4,\\n \"nbformat_minor\": 2\\n}\\n'"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Anaconda3;C:\\\\Anaconda3\\\\Library\\\\mingw-w64\\\\bin;C:\\\\Anaconda3\\\\Library\\\\usr\\\\bin;C:\\\\Anaconda3\\\\Library\\\\bin;C:\\\\Anaconda3\\\\Scripts;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;C:\\\\Program Files\\\\Microsoft VS Code\\\\bin;C:\\\\Git\\\\cmd;C:\\\\Git\\\\mingw64\\\\bin;C:\\\\Git\\\\usr\\\\bin;C:\\\\Program Files\\\\Git LFS;C:\\\\xampp\\\\mysql\\\\bin;C:\\\\Users\\\\Sachin\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;;C:\\\\Microsoft VS Code\\\\bin;C:\\\\Program Files\\\\JetBrains\\\\PyCharm Community Edition 2018.3\\\\bin;'"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.environ['PATH']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.exists('abracadabra')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.exists('/users')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.isdir('/users')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.isfile('/uses')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.X_OK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.access('/users',os.R_OK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.access('/users',os.W_OK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.access('/users',os.X_OK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.system('mspaint')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
