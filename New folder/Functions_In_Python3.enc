{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 style='color:red'>What is a Function ? </h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style='color:blue;font-size:20px'><b>fuctions are just block of statements, which are group together to perform a specific task. The main motive to define function is reuseablity and reducing the code length.</b></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello world\n",
      "5 6\n"
     ]
    }
   ],
   "source": [
    "x = 5 ;\n",
    "y = 6;\n",
    "print(\"Hello world\"); print(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HI\n",
      "Bye\n"
     ]
    }
   ],
   "source": [
    "print(\"HI\")\n",
    "print(\"Bye\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Doc-String We define our function here\n",
      "    so it is a documentation of function that how your function works.\n",
      "    anyone can read this by calling help(hello) or by printing doc string\n",
      "    as print(hello.__doc__)\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "def hello(name):\n",
    "    \"\"\"Doc-String We define our function here\n",
    "    so it is a documentation of function that how your function works.\n",
    "    anyone can read this by calling help(hello) or by printing doc string\n",
    "    as print(hello.__doc__)\n",
    "    \"\"\"\n",
    "    print(f\"Helllo {name}\")\n",
    "    print(\"This is Function\")\n",
    "    return 0\n",
    "\n",
    "print(hello.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "hello() missing 1 required positional argument: 'name'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-2e5dc5cded3e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mhello\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: hello() missing 1 required positional argument: 'name'"
     ]
    }
   ],
   "source": [
    "x = hello()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Helllo sachin\n",
      "This is Function\n"
     ]
    }
   ],
   "source": [
    "x = hello('sachin')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "def even(num):\n",
    "    \"\"\"even(num)---> even takes a num and True if number is even else \n",
    "    return false if num is odd\"\"\"\n",
    "    if num % 2 : \n",
    "        return False\n",
    "    return True\n",
    "\n",
    "x = even(6)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function even in module __main__:\n",
      "\n",
      "even(num)\n",
      "    even(num)---> even takes a num and True if number is even else \n",
      "    return false if num is odd\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(even)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method randint in module random:\n",
      "\n",
      "randint(a, b) method of random.Random instance\n",
      "    Return random integer in range [a, b], including both end points.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "help(random.randint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Hello world                              \n"
     ]
    }
   ],
   "source": [
    "print(\"Hello world\".center(70))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                       Hello world\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello world\".rjust(50))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_board(pos=False):\n",
    "    \"\"\"It will cross dot Board\"\"\"\n",
    "    if not pos : \n",
    "        pos = [ 1,2,3,4,5,6,7,8,9]\n",
    "    top = \" {} \"+\"|\"+\" {} \"+\"|\"+\" {} \"\n",
    "    middle = \"_\"*3+\"|\"+\"_\"*3+\"|\"+\"_\"*3\n",
    "    print(top.format(pos[0],pos[1],pos[2]))\n",
    "    print(middle)\n",
    "    print(top.format(pos[3],pos[4],pos[5]))\n",
    "    print(middle)\n",
    "    print(top.format(pos[6],pos[7],pos[8]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 1 | 2 | 3 \n",
      "___|___|___\n",
      " 4 | 5 | 6 \n",
      "___|___|___\n",
      " 7 | 8 | 9 \n"
     ]
    }
   ],
   "source": [
    "print_board()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   |   |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "___|___|___\n",
      "   |   |   \n"
     ]
    }
   ],
   "source": [
    "print_board([\" \",]*9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_pos = [ \" \" ]*9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   |   |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "___|___|___\n",
      "   |   |   \n"
     ]
    }
   ],
   "source": [
    "print_board(current_pos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_pos[5] = \"X\"\n",
    "current_pos[8] = \"0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   |   |   \n",
      "___|___|___\n",
      "   |   | X \n",
      "___|___|___\n",
      "   |   | 0 \n"
     ]
    }
   ],
   "source": [
    "print_board(current_pos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_pos = [\" \",]*9\n",
    "def play_box():\n",
    "    global current_pos\n",
    "    p1_ch = \"X\"\n",
    "    p2_ch = \"0\"\n",
    "    covered_pos = []\n",
    "    pl1 = input(\"Enter player1 Name : \")\n",
    "    pl2 = input(\"Enter player2 Name : \")\n",
    "    print(f\"Choice of {pl1} = {p1_ch}\")\n",
    "    print(f\"Choice of {pl2} = {p2_ch}\")\n",
    "    c = 1 \n",
    "    while c <= 9 :\n",
    "        covered_pos.sort()\n",
    "        if c %2 : \n",
    "            p1 = int(input(f\"Enter your pos {pl1} (1,9) :  \"))\n",
    "            if p1 in covered_pos : \n",
    "                print(\"Already Covered Position Please Select Another Pos\")\n",
    "                print(\"Choose except \",covered_pos)\n",
    "                continue\n",
    "            covered_pos.append(p1)\n",
    "            current_pos[p1-1] = p1_ch\n",
    "            print_board(current_pos)\n",
    "            #condition check if p1 is in win postion if it is than print and break\n",
    "        else : \n",
    "            p2 = int(input(f\"Enter your pos {pl2} (1,9) : \"))\n",
    "            if p2 in covered_pos : \n",
    "                print(\"Already Covered Position Please Select Another Pos\")\n",
    "                print(\"Choose except \",covered_pos)\n",
    "                continue\n",
    "            covered_pos.append(p2)\n",
    "            current_pos[p2-1] = p2_ch\n",
    "            print_board(current_pos)\n",
    "            #check whethre p2 is winner \n",
    "\n",
    "        c = c + 1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter player1 Name : saschin\n",
      "Enter player2 Name : raja\n",
      "Choice of saschin = X\n",
      "Choice of raja = 0\n",
      "Enter your pos saschin (1,9) :  5\n",
      "   |   |   \n",
      "___|___|___\n",
      "   | X |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos raja (1,9) : 3\n",
      "   |   | 0 \n",
      "___|___|___\n",
      "   | X |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos saschin (1,9) :  3\n",
      "Already Covered Position Please Select Another Pos\n",
      "Choose except  [3, 5]\n",
      "Enter your pos saschin (1,9) :  1\n",
      " X |   | 0 \n",
      "___|___|___\n",
      "   | X |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos raja (1,9) : 2\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      "   | X |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos saschin (1,9) :  3\n",
      "Already Covered Position Please Select Another Pos\n",
      "Choose except  [1, 2, 3, 5]\n",
      "Enter your pos saschin (1,9) :  4\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " X | X |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos raja (1,9) : 5\n",
      "Already Covered Position Please Select Another Pos\n",
      "Choose except  [1, 2, 3, 4, 5]\n",
      "Enter your pos raja (1,9) : 6\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " X | X | 0 \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos saschin (1,9) :  7\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " X | X | 0 \n",
      "___|___|___\n",
      " X |   |   \n",
      "Enter your pos raja (1,9) : 8\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " X | X | 0 \n",
      "___|___|___\n",
      " X | 0 |   \n",
      "Enter your pos saschin (1,9) :  9\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " X | X | 0 \n",
      "___|___|___\n",
      " X | 0 | X \n"
     ]
    }
   ],
   "source": [
    "play_box()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_board(pos=False):\n",
    "    \"\"\"It will cross dot Board\"\"\"\n",
    "    if not pos : \n",
    "        pos = [ 1,2,3,4,5,6,7,8,9]\n",
    "    top = \" {} \"+\"|\"+\" {} \"+\"|\"+\" {} \"\n",
    "    middle = \"_\"*3+\"|\"+\"_\"*3+\"|\"+\"_\"*3\n",
    "    print(top.format(pos[0],pos[1],pos[2]))\n",
    "    print(middle)\n",
    "    print(top.format(pos[3],pos[4],pos[5]))\n",
    "    print(middle)\n",
    "    print(top.format(pos[6],pos[7],pos[8]))\n",
    "\n",
    "\n",
    "winning_pos = { \n",
    "                0:[(1,2),(4,8),(3,6)],\n",
    "                1:[ (4,7),(0,2) ],\n",
    "                2:[ (0,1),(4,6),(5,8)],\n",
    "                3:[ (0,6),(4,5)],\n",
    "                4:[ (1,7),(3,5)],\n",
    "                5:[ (2,8),(3,4)],\n",
    "                6:[ (0,3),(4,2),(7,8)],\n",
    "                7:[ (1,4),(6,8)],\n",
    "                8:[ (0,4),(2,5),(6,7)]\n",
    "               \n",
    "                    }\n",
    "\n",
    "current_pos = [\" \",]*9\n",
    "def play_box():\n",
    "    global current_pos\n",
    "    p1_ch = \"X\"\n",
    "    p2_ch = \"0\"\n",
    "    covered_pos = []\n",
    "    pl1 = input(\"Enter player1 Name : \")\n",
    "    pl2 = input(\"Enter player2 Name : \")\n",
    "    print(f\"Choice of {pl1} = {p1_ch}\")\n",
    "    print(f\"Choice of {pl2} = {p2_ch}\")\n",
    "    c = 1 \n",
    "    while c <= 9 :\n",
    "        covered_pos.sort()\n",
    "        if c %2 : \n",
    "            p1 = int(input(f\"Enter your pos {pl1} (1,9) :  \"))\n",
    "            if p1 in covered_pos : \n",
    "                print(\"Already Covered Position Please Select Another Pos\")\n",
    "                print(\"Choose except \",covered_pos)\n",
    "                continue\n",
    "            covered_pos.append(p1)\n",
    "            current_pos[p1-1] = p1_ch\n",
    "            print_board(current_pos)\n",
    "            check = p1 - 1\n",
    "            data = winning_pos.get(check)\n",
    "            for d in data : \n",
    "                if p1_ch == current_pos[d[0]] and p1_ch == current_pos[d[1]] :\n",
    "                    print(f\"{pl1} is Winner\")\n",
    "                    exit(0)\n",
    "                    \n",
    "            \n",
    "            #condition check if p1 is in win postion if it is than print and break\n",
    "        else : \n",
    "            p2 = int(input(f\"Enter your pos {pl2} (1,9) : \"))\n",
    "            if p2 in covered_pos : \n",
    "                print(\"Already Covered Position Please Select Another Pos\")\n",
    "                print(\"Choose except \",covered_pos)\n",
    "                continue\n",
    "            covered_pos.append(p2)\n",
    "            current_pos[p2-1] = p2_ch\n",
    "            print_board(current_pos)\n",
    "            #check whethre p2 is winner \n",
    "\n",
    "        c = c + 1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_pos = [\" \",]*9\n",
    "def play_box():\n",
    "    global current_pos\n",
    "    p1_ch = \"X\"\n",
    "    p2_ch = \"0\"\n",
    "    covered_pos = []\n",
    "    pl1 = input(\"Enter player1 Name : \")\n",
    "    pl2 = input(\"Enter player2 Name : \")\n",
    "    print(f\"Choice of {pl1} = {p1_ch}\")\n",
    "    print(f\"Choice of {pl2} = {p2_ch}\")\n",
    "    c = 1 \n",
    "    while c <= 9 :\n",
    "        covered_pos.sort()\n",
    "        if c %2 : \n",
    "            p1 = int(input(f\"Enter your pos {pl1} (1,9) :  \"))\n",
    "            if p1 in covered_pos : \n",
    "                print(\"Already Covered Position Please Select Another Pos\")\n",
    "                print(\"Choose except \",covered_pos)\n",
    "                continue\n",
    "            covered_pos.append(p1)\n",
    "            current_pos[p1-1] = p1_ch\n",
    "            print_board(current_pos)\n",
    "            check = p1 - 1\n",
    "            data = winning_pos.get(check)\n",
    "            for d in data : \n",
    "                if p1_ch == current_pos[d[0]] and p1_ch == current_pos[d[1]] :\n",
    "                    print(f\"{pl1} is Winner\")\n",
    "                    exit(0)\n",
    "                    \n",
    "            \n",
    "            #condition check if p1 is in win postion if it is than print and break\n",
    "        else : \n",
    "            p2 = int(input(f\"Enter your pos {pl2} (1,9) : \"))\n",
    "            if p2 in covered_pos : \n",
    "                print(\"Already Covered Position Please Select Another Pos\")\n",
    "                print(\"Choose except \",covered_pos)\n",
    "                continue\n",
    "            covered_pos.append(p2)\n",
    "            current_pos[p2-1] = p2_ch\n",
    "            print_board(current_pos)\n",
    "            #check whethre p2 is winner \n",
    "\n",
    "        c = c + 1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter player1 Name : sachin\n",
      "Enter player2 Name : rajat\n",
      "Choice of sachin = X\n",
      "Choice of rajat = 0\n",
      "Enter your pos sachin (1,9) :  1\n",
      " X |   |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos rajat (1,9) : 2\n",
      " X | 0 |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos sachin (1,9) :  5\n",
      " X | 0 |   \n",
      "___|___|___\n",
      "   | X |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos rajat (1,9) : 3\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      "   | X |   \n",
      "___|___|___\n",
      "   |   |   \n",
      "Enter your pos sachin (1,9) :  9\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      "   | X |   \n",
      "___|___|___\n",
      "   |   | X \n",
      "sachin is Winner\n",
      "Enter your pos rajat (1,9) : 4\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " 0 | X |   \n",
      "___|___|___\n",
      "   |   | X \n",
      "Enter your pos sachin (1,9) :  5\n",
      "Already Covered Position Please Select Another Pos\n",
      "Choose except  [1, 2, 3, 4, 5, 9]\n",
      "Enter your pos sachin (1,9) :  6\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " 0 | X | X \n",
      "___|___|___\n",
      "   |   | X \n",
      "Enter your pos rajat (1,9) : 7\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " 0 | X | X \n",
      "___|___|___\n",
      " 0 |   | X \n",
      "Enter your pos sachin (1,9) :  8\n",
      " X | 0 | 0 \n",
      "___|___|___\n",
      " 0 | X | X \n",
      "___|___|___\n",
      " 0 | X | X \n"
     ]
    }
   ],
   "source": [
    "play_box()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "random.choice([1,2,3,4,6,7,8,9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
